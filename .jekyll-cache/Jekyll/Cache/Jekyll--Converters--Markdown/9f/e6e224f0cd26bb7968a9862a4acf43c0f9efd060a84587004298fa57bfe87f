I"Ý<div>
One of the best so called **unusual use cases of Jekyll** is learning the basics of web development: html, css and JavaScript. But as the JavaScript part is growing in your application the need of a package manager like npm comes around and with that we reach the limits of using Jekyll. Although not impossible to integrate with npm, the production environment might becomes too complicated using two different compilers at the same time. Yet it we don't have to say goodbye to Jekyll at this point at all. 

```liquid
<div>this is some preformatted code</div>
```
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	 

&gt;It is very well possible to use Jekyll in creating API endpoints that can be consumed by other website generators. In this demo I will show the combination with React.

## MangiarBene

We start with a simple Jekyll website **MangiarBene** that constraints of two collections ('cookbooks' and 'recipes') as well as a blog from which this actual post is the 'latest'.


	.â”€â”€ _books
	â”œâ”€â”€ _config.yml
	â”œâ”€â”€ _includes
	â”œâ”€â”€ _layouts
	â”œâ”€â”€ _posts
	â”œâ”€â”€ _recipes
	â”œâ”€â”€ _sass
	â”œâ”€â”€ _site
	â”œâ”€â”€ blog.md
	â”œâ”€â”€ books.md
	â”œâ”€â”€ index.md
	â””â”€â”€ recipes.html


In Jekyll, we can call the recipes of a book, using a condition:



Likewise we can call the book of a recipe:



Both examples result in a data schema that is similar to the many-to-many-relationships used in non-relational databases like MongoDB. So what if in Jekyll we could use this technique to create a json file that contains the same structure. And we sure can! 

Create a folder 'api' with files for blog, books and recipes, like so:

	â”œâ”€â”€ api
	|   â”œâ”€â”€ blog.json
	|   â”œâ”€â”€ books.json
	|   â””â”€â”€ recipes.json

Now there is only one problem here, fortunatly with a simple solution. In order to achieve valid json, the last iteration cannot end with a comma. And because the if statement filters from an array, and therefore not all iterations will become valid, a comma cannot be avoided here. 

In Liquid you can eleminate the last comma, like so:





This wil not work in case the last forloop is not valid to the condition. In other words the last forloop which is valid to the condition might not be the last forloop of the forloop as a whole.

The solution is to create a new empty array, while using the push method to gather the desired content. This way we get rid of the conditional statement. 





Finally check if the json is valid go to https://jsonlint.com/.

I published the result on Github and Cloudcannon.

Now we can use the json file calling: [trim-seahorse.cloudvent.net(https://trim-seahorse.cloudvent.net/)


Jekyll api endpoints

<a href="https://trim-seahorse.cloudvent.net/api/recipes.json" target="_blank" rel="noopener noreferrer">
/api/recipes.json
</a>
<br />
<a href="https://trim-seahorse.cloudvent.net/api/books.json" target="_blank" rel="noopener noreferrer">
/api/books.json
</a>
<br />
<a href="https://trim-seahorse.cloudvent.net/api/blog.json" target="_blank" rel="noopener noreferrer">
/api/blog.json
</a>


consume in React

(mangiarbene.io)

</div>
:ET