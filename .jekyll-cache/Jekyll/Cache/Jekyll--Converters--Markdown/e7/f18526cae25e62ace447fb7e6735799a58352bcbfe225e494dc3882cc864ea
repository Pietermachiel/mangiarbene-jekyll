I"˜7<blockquote>
  <p>One of the best so called <strong>unusual use cases of Jekyll</strong> is learning the basics of web development: HTML, CSS and JavaScript. But as the JavaScript part is growing in your application, the need of a package manager like npm comes around, and with that we reach the limits of using Jekyll. Although not impossible to integrate with npm, the production environment might become too complicated, using two different compilers at the same time. Yet we donâ€™t have to say goodbye to Jekyll at this point at all.</p>
</blockquote>

<blockquote>
  <p>It is very well possible to use Jekyll in creating API endpoints, that can be consumed by other website generators. In this demo I will show the combination with React. That way you are completely free in your development, while enjoying the bennefits of a simple, static and blog-aware Jekyll application. This time as a real backend.</p>
</blockquote>

<h1 id="hello">Hello,</h1>

<div class="home-img_pieter">
    <img src="/img/pieter0.jpg" alt="" />   
</div>

<p><strong>â€¦my name is Pieter Roozen and I live in The Hague, the Netherlands. I am 65 years old, father of 4 and partner of Ruth. I love skitouring and sailing and I bake sourdough bread on a dayly basis.</strong></p>

<div class="home-img_vangogh">
    <img src="/img/museums.jpg" alt="" />   
</div>

<h2 id="my-former-life-as-a-designer">My former life as a designer</h2>

<p>In my former life I was a graphic designer, specialised in designing books, art catalogues and museum concepts for the â€˜bigâ€™ Dutch museums. Well, Dutch museums arenâ€™t that big, but the Van Gogh Museum is famous anough. Among other, our design agency was for more than 15 years in full service for the VGM. We contributed to all the major pioneerwork in presenting a modern museum to a broad audience, including the automation of text content and color management of the museumâ€™s reproduction output.</p>

<p><br /></p>
<div class="home-img_vangogh">
    <img src="/img/van-gogh-00.jpg" alt="" />   
</div>

<h2 id="my-next-step">My next step</h2>

<p>At my age I could retire and make bicycle tours along the Dutch coast, sail around the world, or take long holliday trips. But I decided to learn web development.</p>

<h2 id="jekyll">Jekyll</h2>

<p>At this point I found Jekyll very usefull in learning the basics of HTML, CSS and JavaScript. We all know why: Jekyll is simple, fast and secure and very well suited for presentational websites like portfolioâ€™s, blogs or even museum websites. In combination with the <a href="https://https://cloudcannon.com/" target="_blank" rel="noopener noreferrer"><strong>CloudCannon</strong><a></a> CMS many would find it a superior alternative for Wordpress, Drupal or other PHP frameworks like Laravel. I think this applies to all situations where the user does not need to realtime interacting with a  RESTfull backend.</a></p>

<p>Of course the portfolio website of my design agency <a href="https://roozen.nl" target="_blank" rel="noopener noreferrer"><strong>Studio Roozen</strong><a></a> was also made in Jekyll.</a></p>

<h2 id="jekyll-separates-content-from-logic">Jekyll separates content from logic</h2>

<p>The reason why I love Jekyll is because it has a very elegant way of separating content from logic, including the HTML. You can use the Markdown language to write coded content without writing the code yourself. In fact I recognized that it is very similar to the way in the early days, where we used textcontent written in Word in combination with the QuarkXpress DTP software.</p>

<p>So it all feels very intuÃ¯tive for an old school graphic designer like me.</p>

<h2 id="restfull-apis">RESTfull apiâ€™s</h2>

<p>These days, APIâ€™s to transfer data around the web are very popular. APIâ€™s are RESTfull if you can do all the HTTP requests like GET, PUT, POST and DELETE, but very often you only need the GET request as in to presen tyur content to the user. Drupal and even Wordpress, as I allready mentioned, recently came with plugins for RESTfull API solutions.</p>

<h2 id="how-about-jekyll">How about Jekyll?</h2>

<p>So how about Jekyll as it is very well suited in seperating content from the logic. And yes, you can! This is where my talk is all about.</p>

<p>Basically, APIâ€™s are used to make the same content available to different applications in a form that can be parsed in the desired language. In short: you cannot make Jekyll RESTfull, bacause it is static. But ist very well possible to create a socalled API endpoint.</p>

<h2 id="mangiarbene">MangiarBene</h2>

<p>I designed a simple Jekyll website about Cookbooks (what elseâ€¦? :-) called <strong>MangiarBene</strong>, which in this case is the actual website you are visiting right now. It consists of two collections: one of <strong>15 cookbooks</strong> and another of <strong>48 recipes</strong> as well as a <strong>blog</strong> from which this actual post is the â€˜latestâ€™.</p>

<p>You can go to the <a href="/">homepage</a> of <strong>MangiarBene</strong> now, if you want, and see how the website is structured.</p>

<p>Subsequently I developed a second SPA website (in React), that just uses the content from <strong>MangiarBene</strong> as JSON data. You could also examin this at <a href="https://api.roozen.nl" target="_blank" rel="noopener noreferrer">
https://api.roozen.nl
</a>. You will see that it is identical, only the background color is different.</p>

<p>But let me explain first.</p>

<h2 id="many-to-many-relationships">Many to many relationships</h2>

<p>In Jekyll it is possible to relate collections and posts from the content of the YAML front matter blocks. We can call the recipes of a book, using the condition:</p>

<p><strong>if recipe.book == page.title</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"book-links"</span><span class="nt">&gt;</span>
    {%- for recipe in site.recipes -%}
    {%- if recipe.book == page.title -%}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/recipes/{{ recipe.title | slugify }}"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h5&gt;</span>{{ recipe.title }} {{ recipe.index }}<span class="nt">&lt;/h5&gt;</span>
    <span class="nt">&lt;/a&gt;</span>
    {%- endif -%}
    {%- endfor -%}    
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>This way, we can get all the recipes of the collection recipes, along with all the data of that recipe and add it to a certain book of the collection books.</p>

<p>Likewise we can add the data of a book to a recipe:</p>

<p><strong>if book.title == page.book</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"recipe-box_credits"</span><span class="nt">&gt;</span>
    {%- for book in site.books -%}
    {%- if book.title == page.book -%}
        <span class="nt">&lt;h6&gt;</span>{{  book.title }}<span class="nt">&lt;/h6&gt;</span>    
        <span class="nt">&lt;p&gt;</span>{{  book.author }}<span class="nt">&lt;/p&gt;</span>     
        <span class="nt">&lt;p&gt;</span>{{  book.content | truncatewords: 20 }} <span class="nt">&lt;span&gt;</span>Read more &gt;<span class="nt">&lt;/span&gt;&lt;/p&gt;</span>     
    {%- endif -%}
    {%- endfor -%}           
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Both result in a data schema that is similar to the many-to-many-relationships used in non-relational databases, like MongoDB. So what if in Jekyll we could use this technique to create a JSON file that contains the same structure, and make it available to the internet? And we sure can!</p>

<h2 id="constructing-the-api-endpoints">Constructing the API endpoints</h2>

<p>Create a folder called <strong>api</strong> with files for <strong>books.json</strong> and <strong>recipes.json</strong>. In the front matter block we just set the layout to null and thatâ€™s it. Now we can construct a JSON file and establish the same relations as we did before in creating the pages for books, recipes and posts.</p>

<p>There is only one problem here (fortunatly with a simple solution). In order to achieve valid JSON, the last iteration cannot end with a comma. Since the if-statement works as a filter, and therefore not all iterations will become valid, a comma cannot be avoided here. Let me explain.</p>

<p>In Liquid you can eleminate the last comma, with the <strong>unless forloop.last</strong> statement. But this wil not work in case the last forloop is not valid to the condition. In other words, the last forloop which is valid to the condition might not be the last forloop of the forloop as a whole. Resulting in the last comma.</p>

<p>The solution is to create a new empty array, while using the push method to gather the desired content. This way we get rid of the conditional statement.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: null
---
[ 
    {% for book in site.books %}
        {
            "title"    : "{{ book.title }}",
            "author"   : "{{ book.author }}",
            "publisher": "{{ book.publisher }}",
            "year"     : "{{ book.year }}",
            "kitchen"  : "{{ book.kitchen }}",
            "link"     : "{{ book.link }}",
            "book_url" : "{{ book.book_url }}",
            {% assign p = book.title | slugify %}
            {% assign my_recipe = "" | split: "" %}
            {% for recipetitle in site.recipes %}
            {% assign detitel = recipetitle.book | slugify %}
            {% if p == detitel %}
            {% assign itemtitle = "" | split: "" %}
            {% assign itemtitle = itemtitle | push: recipetitle %}
            {% assign my_recipe = my_recipe | push: itemtitle %}
            {% endif %}
            {% endfor %}
            "recipes"  : [ 
                {% for therecipe in my_recipe %}  
                {
                    "index"   : "{{ therecipe[0].index }}",
                    "title"   : "{{ therecipe[0].title }}",
                    "page"    : "{{ therecipe[0].page }}",
                    "product" : "{{ therecipe[0].product }}",
                    "dish"    : "{{ therecipe[0].dish }}"
                }{% unless forloop.last %},{% endunless %}
                {% endfor %}
            ],
            "text"  : "{{ book.text }}",
            "content"  : {{ book.content | jsonify }}
        }{% unless forloop.last %},{% endunless %}
    {% endfor %}
]
</code></pre></div></div>

<p>Finally check if the JSON is valid go to: 
<a href="https://jsonlint.com/" target="_blank" rel="noopener noreferrer">
https://jsonlint.com/
</a>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[ 
    {
        "index": "1",
        "title": "Candied citrus peel",
        "id": "candied-citrus-peel",
        "product": "lemon",
        "dish": "basics",
        "url": "/recipes/candied-citrus-peel/",
        "book"       : [   
            {
                "index"    : "1",
                "title"    : "30 ingredients",
                "author"   : "Sally Clarke",
                "content"  : "<span class="nt">&lt;p&gt;</span>Britainâ€™s pioneer of seasonal cooking Sally Clarke is back with a new collection of seasonal recipes to mark the 30th birthday year of her legendary Notting Hill restaurant.<span class="nt">&lt;/p&gt;</span>\n\n<span class="nt">&lt;p&gt;</span>Known for pioneering seasonal fine dining in British cuisine, the award winning chef, restaurateur and author has chosen a handful of recipes for each of her favourite 30 ingredients in her stunning new cookery book. The simple idea of cooking with the freshest and best market produce, Sally Clarkeâ€™s vision for thirty years, is at the heart of her new book of ninety-five recipes.<span class="nt">&lt;/p&gt;</span>\n"
            }
        ],
        "page": "160"
    },
...

</code></pre></div></div>

<h2 id="jekyll-as-a-blog-api">Jekyll as a blog API</h2>

<p>More interesting maybe is the fact that we can use the same technique to create a blog API from the Jekyll data. Now in the <strong>data</strong> folder create a file called blog.json, and follow the same instructions as before. Here we want to use the <strong>content</strong> of a post as well, which contains the Liquid templating language, resulting in HTML tags in your output. Therefore you need to use the <strong>jsonify</strong> filter here.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: null
---
[ 
    {% for book in site.books %}
        {
            "title"    : "{{ book.title }}",
            <span class="c">&lt;!-- ... --&gt;</span>
            "content"  : {{ book.content | jsonify }}
        }{% unless forloop.last %},{% endunless %}
    {% endfor %}
]
</code></pre></div></div>

<h2 id="publishing-the-jekyll-site-on-cloudcannon">Publishing the Jekyll site on CloudCannon</h2>

<p>Publish the result on Github and Cloudcannon, which in this case I already did, obviously.</p>

<p>Now we can use the created Jekyll API endpoints. As you can see they are part of this actual website.</p>

<p><a href="https://trim-seahorse.cloudvent.net/api/recipes.json" target="_blank" rel="noopener noreferrer">
/api/recipes.json
</a>
<br />
<a href="https://trim-seahorse.cloudvent.net/api/books.json" target="_blank" rel="noopener noreferrer">
/api/books.json
</a>
<br />
<a href="https://trim-seahorse.cloudvent.net/api/blog.json" target="_blank" rel="noopener noreferrer">
/api/blog.json
</a></p>

<h2 id="using-the-api-in-react">Using the API in React</h2>

<p>Hosting the Jekyll website â€“ which includes the API endpoints â€“ on either GitHub or CloudCannon makes it easy to change the content, and see how this is in sync with the SPA that consumes the content, in this demo developed in React:</p>

<p><a href="https://api.roozen.nl" target="_blank" rel="noopener noreferrer">
https://api.roozen.nl
</a></p>

:ET