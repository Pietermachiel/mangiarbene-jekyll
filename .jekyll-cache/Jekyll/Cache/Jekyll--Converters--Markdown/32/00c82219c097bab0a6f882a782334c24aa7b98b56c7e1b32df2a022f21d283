I"<p>One of the best so called <strong>unusual use cases of Jekyll</strong> is learning the basics of web development: HTML, CSS and JavaScript. But as the JavaScript part is growing in your application the need of a package manager like npm comes around and with that we reach the limits of using Jekyll. Although not impossible to integrate with npm, the production environment might become too complicated using two different compilers at the same time. Yet it we don’t have to say goodbye to Jekyll at this point at all.</p>

<blockquote>
  <p>It is very well possible to use Jekyll in creating API endpoints that can be consumed by other website generators. In this demo I will show the combination with React.</p>
</blockquote>

<h2 id="mangiarbene">MangiarBene</h2>

<p>We start with a simple Jekyll website <strong>MangiarBene</strong>, which is the actual website you are visiting right now, that constraints of two collections of <strong>15 cookbooks</strong> and <strong>48 recipes</strong> as well as a blog from which this actual post is the ‘latest’.</p>

<p>In Jekyll, we can call the recipes of a book, using the condition:</p>

<p><strong>recipe.book == page.title</strong></p>

<p>Likewise we can call the book of a recipe:</p>

<p><strong>book.title == page.book</strong></p>

<p>Both result in a data schema that is similar to the many-to-many-relationships used in non-relational databases like MongoDB. So what if in Jekyll we could use this technique to create a json file that contains the same structure? And we sure can!</p>

<p>Create a folder called <strong>api</strong> with files for <strong>blog</strong>, <strong>books</strong> and <strong>recipes</strong>.</p>

<h2 id="constructing-the-api-endpoints">Constructing the API endpoints</h2>

<p>Now there is only one problem here, fortunatly with a simple solution. In order to achieve valid json, the last iteration cannot end with a comma. And because the if statement filters from an array, and therefore not all iterations will become valid, a comma cannot be avoided here.</p>

<p>In Liquid you can eleminate the last comma, with the unless forloop.last statement. But this wil not work in case the last forloop is not valid to the condition. In other words the last forloop which is valid to the condition might not be the last forloop of the forloop as a whole. Resulting in the last comma.</p>

<p>The solution is to create a new empty array, while using the push method to gather the desired content. This way we get rid of the conditional statement.</p>

<p>Finally check if the json is valid go to https://jsonlint.com/.</p>

<p>I published the result on Github and Cloudcannon.</p>

<p>Now we can use the created Jekyll api endpoints</p>

<p><a href="https://trim-seahorse.cloudvent.net/api/recipes.json" target="_blank" rel="noopener noreferrer">
/api/recipes.json
</a>
<br />
<a href="https://trim-seahorse.cloudvent.net/api/books.json" target="_blank" rel="noopener noreferrer">
/api/books.json
</a>
<br />
<a href="https://trim-seahorse.cloudvent.net/api/blog.json" target="_blank" rel="noopener noreferrer">
/api/blog.json
</a></p>

<h2 id="react">React</h2>

<p>Consuming the api’s in React leads to an almost similar website:</p>

<p><a href="https://api.roozen.nl" target="_blank" rel="noopener noreferrer">
/api.roozen.nl
</a></p>

:ET